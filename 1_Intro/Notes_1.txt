### Scalars ###
- Denoted by "$"
- They depict singular quantity
- Weakly typed language
- No distinction between integer, float, a string

### Scalars with String values ####
- String can be a single quoted or double quoted:
	$x = 'String here'; <- no interpolation
	$x = "String here"; <- with interpolation

### Quote Operators ####
- $x = qq : String here : <- same as Double Quoted
- $x = q : String here : <- same as Single Quoted
- back quotes are used for executing external commands:
	print ` dir c: `
	print ` ls `
	equivalent: print qx ^dir^

- qr <- regex

### The Undef values ####
-uninitialized variables have undef values:
	when use in numeric operation = 0
	when use in String operation = ""
	
### Interpolation ###
-Takes place in double quoted Strings
-metacharacters reflect their special meanings
-in scalars values get substituted in place of their variable
-in arrays spaces gets embedded between elements
-true for quote operators
-takes place in print and regex

### Context ###
-two types of context in scalars:
	-Numeric
	-String

-context is determine by the operation on the scalar
-In a numeric context any string values in an expression are converted to numeric values
-Similarly in a string context numbers are converted into string

### Numeric Operators ###
- Perl determines the context based on the operation
- All numeric operators in C are supported in Perl
- +,-,/,*,%,=
- ** power operator 9**2

Numeric LOGICAL operators are:
- && <- and
- || <- or
- !  <- not

Numeric RELATIONAL operators are:
- == <- equal
- != <- not equal
- <  <- less than
- >  <- greater than
- <= <- less than or equal
- >= <- greater than or equal
- <=> <- numeric comparison operator (a<=>b 1 if a>b, 0 if equal, -1 if a<b)

### True and false in Perl ###
- All these are false:
	- "" #null String
	- 0
	- 0.0
	- Undef
	- "0"

### String Operators ###
- "." concatenate Strings
- 'x' repetition operator

### String Logical Operators ###
eq <- Equality
ne <- Not equal
lt <- Less than
gt <- Greater than
le <- Less than or equal to
ge <- Greater than or equal
cmp <- String comparison like <=> in numeric

### Range Operator ###
- in scalar work like a flip flop
- return list from left to right (left should be < than right)